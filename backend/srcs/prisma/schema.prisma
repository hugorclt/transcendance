generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  username         String        @unique  @db.VarChar(50)
  email            String        @unique
  password         String
  avatar           String?
  refreshToken     String?
  xp               Int           @default(500)
  type             Type          @default(LOCAL)
  status           Status?       @default(DISCONNECTED)
  balance          Int?          @default(0)
  is2fa            Boolean       @default(false)
  secret2fa        String        @default("")
  preferences      Preference?
  sender           Message[]
  participant      Participant[]
  lobbyMember      LobbyMember[]
  invitation       Invitation[]  @relation("invited")
  inviter          Invitation[]  @relation("inviter")
  items            Item[]        @relation("itemOwner")
  lobbyOwner       Lobby[]       @relation("lobbyOwner")
  lobbySpectator   Lobby[]       @relation("lobbySpectator")
  friends          User[]        @relation("friends")
  symmetricFriends User[]        @relation("friends")
  isBloqued        User[]        @relation("bloqued")
  hasBloqued       User[]        @relation("bloqued")
  isBanned         Room[]        @relation("Banned")
  roomOwner        Room[]        @relation("owner")
  matchWinner      Match[]       @relation("Winner")
  matchLoser       Match[]       @relation("Loser")
  stat             Stat?
}

model Preference {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user       User           @relation(fields: [userId], references: [id])
  userId     String         @unique @db.Uuid
  visibility VisibilityMode
}

enum VisibilityMode {
  VISIBLE
  INVISIBLE
  AWAY
}

model Invitation {
  id         String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  type       InvitationType
  userId     String         @db.Uuid
  userFromId String?        @db.Uuid
  lobbyId    String?        @db.Uuid
  user       User           @relation("invited", fields: [userId], references: [id])
  userFrom   User?          @relation("inviter", fields: [userFromId], references: [id])
  lobbyFrom  Lobby?         @relation(fields: [lobbyId], references: [id])
}

enum InvitationType {
  LOBBY
  FRIEND
}

//================== GAME =================
model Lobby {
  id          String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  ownerId     String        @unique @db.Uuid
  nbPlayers   Int           @default(2)
  maxDuration Int           @default(180)
  mode        EMode         @default(CLASSIC)
  private     Boolean       @default(false)
  map         EMap          @default(CLASSIC)
  invitations Invitation[]
  owner       User          @relation("lobbyOwner", fields: [ownerId], references: [id])
  members     LobbyMember[]
  spectators  User[]        @relation("lobbySpectator")
  state       LobbyState
}

enum LobbyState {
  JOINABLE
  FULL
  SELECTION
  MATCHMAKING
  GAME
}

model LobbyMember {
  id         String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  team       Boolean @default(false)
  ready      Boolean @default(false)
  paddleType EPaddle @default(CLASSIC)
  vote       EMap?
  userId     String  @db.Uuid
  lobbyId    String  @db.Uuid
  user       User    @relation(fields: [userId], references: [id])
  lobby      Lobby   @relation(fields: [lobbyId], references: [id])
}

model Match {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date        DateTime @default(now())
  duration    DateTime
  winnerScore Int
  winners     User[]   @relation("Winner")
  loserScore  Int
  losers      User[]   @relation("Loser")
}

model Stat {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  xp     Int    @default(0)
  lvl    Int    @default(0)
  nbGame Int    @default(0)
  nbWin  Int    @default(0)
  nbGoal Int    @default(0)
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid
}

//================== SHOP =======================
model Item {
  id     String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name   String
  image  String
  price  Int
  type   EItem
  owners User[] @relation("itemOwner")
}

model Room {
  id           String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name         String        @unique
  password     String
  avatar       String
  type         Int
  ownerId      String        @db.Uuid
  isPrivate    Boolean
  isDm         Boolean
  banned       User[]        @relation("Banned")
  roomMsg      Message[]     
  participants Participant[]
  owner        User          @relation("owner", fields: [ownerId], references: [id], onDelete: NoAction)
}

model Participant {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  role     Role     @default(BASIC)
  roomId   String   @db.Uuid
  userId   String   @db.Uuid
  joinedAt DateTime @default(now())
  mute     DateTime @default(now())
  room     Room     @relation(fields: [roomId], references: [id], onDelete: NoAction)
  user     User     @relation(fields: [userId], references: [id], onDelete: NoAction)
}

model Message {
  id       String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content  String
  date     DateTime @default(now())
  senderId String   @db.Uuid
  roomId   String   @db.Uuid
  room     Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  sender   User     @relation(fields: [senderId], references: [id], onDelete: NoAction)
}

enum Type {
  LOCAL
  GOOGLE
  API42
}

enum Status {
  DISCONNECTED
  CONNECTED
  GAME
  LOBBY
}

enum Role {
  BASIC
  ADMIN
  OWNER
}

enum EItem {
  PADDLE
  TRAIL
  GOAL
}

enum EMap {
  CLASSIC
  SPACE
  RETROWAVE
}

enum EMode {
  CLASSIC
  CHAMPIONS
}

enum EPaddle {
  CLASSIC
  BASIC
  RED
  BLUE
  ORANGE
  PURPLE
  GREEN
}
